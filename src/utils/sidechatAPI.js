import AsyncStorage from '@react-native-async-storage/async-storage';
import { sha256 } from 'js-sha256';
import DeviceInfo from 'react-native-device-info';
const defaultHeaders = {
  Accept: 'application/json',
  'Content-Type': 'application/json',
};
import semver from 'semver';

/**
 * Initiate the login process with a phone number.  Should be followed up with verifySMSCode().
 * @param {Number} phoneNumber - US phone number (WITHOUT +1) to send verification code to
 */
const loginViaSMS = async phoneNumber => {
  try {
    const res = await fetch(`https://api.sidechat.lol/v1/login_register`, {
      method: 'POST',
      headers: defaultHeaders,
      body: JSON.stringify({
        phone_number: `+1${phoneNumber}`,
        version: 3,
      }),
    });
    const json = await res.json();
    return json;
  } catch (err) {
    console.err(error);
    throw new Error('Failed to request SMS verification.');
  }
};

/**
 * Verify the code sent via SMS with loginViaSMS().
 * @param {Number} phoneNumber - US phone number (WITHOUT +1) that verification code was sent to
 * @param {String} code  - the verification code
 */
const verifySMSCode = async (phoneNumber, code) => {
  try {
    const res = await fetch(`https://api.sidechat.lol/v1/verify_phone_number`, {
      method: 'POST',
      headers: defaultHeaders,
      body: JSON.stringify({
        phone_number: `+1${phoneNumber}`,
        code: code.toUpperCase(),
      }),
    });
    const json = await res.json();
    return json;
  } catch (err) {
    console.err(err);
    throw new Error('Failed verify this code.');
  }
};

/**
 * Set the user's age
 * @param {Number} age - user's age in years
 * @param {String} registrationID  - the registration ID generated by verifySMSCode()
 */
const setAge = async (age, registrationID) => {
  if (age < 13) {
    throw new Error("You're too young to use Offsides.");
  }
  try {
    const res = await fetch(
      `https://api.sidechat.lol/v1/complete_registration`,
      {
        method: 'POST',
        headers: defaultHeaders,
        body: JSON.stringify({
          age: Number(age),
          registration_id: registrationID,
        }),
      },
    );
    const json = await res.json();
    return json;
  } catch (err) {
    console.err(err);
    throw new Error('Failed verify this code.');
  }
};

/**
 * Initiate the email setup process.  Should be followed up with checkEmailVerification().
 * @param {String} email - school email address to send verification code to
 * @param {String} token - user bearer token
 */
const registerEmail = async (email, token) => {
  try {
    const res = await fetch(
      `https://api.sidechat.lol/v2/users/register_email`,
      {
        method: 'POST',
        headers: {
          ...defaultHeaders,
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({
          email: email,
        }),
      },
    );
    const json = await res.json();
    if (json.message) {
      throw new Error(json.message);
    }
    return json;
  } catch (err) {
    console.err(error);
    throw new Error('Failed to request email verification.');
  }
};

/**
 * Check is the user's email is verified.
 * @param {String} token - user bearer token
 */
const checkEmailVerification = async token => {
  try {
    const res = await fetch(
      `https://api.sidechat.lol/v1/users/check_email_verified`,
      {
        method: 'GET',
        headers: {
          ...defaultHeaders,
          Authorization: `Bearer ${token}`,
        },
      },
    );
    const json = await res.json();
    if (json.verified_email_updates_response) {
      return json.verified_email_updates_response;
    } else {
      throw new Error(json?.message || 'Email is not verified.');
    }
  } catch (err) {
    console.err(error);
    throw new Error('Email is not verified.');
  }
};

/**
 * Set the device ID based on the Android device ID
 * @param {String} token  - the user bearer token
 */
const setDeviceID = async token => {
  const id = await DeviceInfo.getAndroidId();
  const deviceID = sha256(id);
  try {
    const res = await fetch(
      `https://api.sidechat.lol/v1/register_device_token`,
      {
        method: 'POST',
        headers: {
          ...defaultHeaders,
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({
          build_type: 'release',
          bundle_id: 'com.flowerave.sidechat',
          device_token: deviceID,
        }),
      },
    );
    const json = await res.json();
    await AsyncStorage.setItem('deviceID', deviceID);
    return json;
  } catch (err) {
    console.err(err);
    throw new Error('Failed verify this code.');
  }
};

/**
 * Get updated status for user and group
 * @param {String} groupID - the group ID that the user belongs to
 * @param {String} token - the user bearer token
 * @returns
 */
const getUserAndGroup = async (groupID, token) => {
  try {
    const res = await fetch(
      `https://api.sidechat.lol/v1/updates?group_id=${groupID}`,
      {
        method: 'GET',
        headers: {
          ...defaultHeaders,
          Authorization: `Bearer ${token}`,
        },
      },
    );
    const json = await res.json();
    return json;
  } catch (err) {
    console.error(err);
    throw new Error(`Failed to get posts from group.`);
  }
};

/**
 * Fetches posts from the specified category
 * @param {String} groupID
 * @param {String} token
 * @param {"hot"|"recent"|"top"} category
 * @param {String} [cursor]
 * @returns List of posts
 */
const getGroupPosts = async (groupID, token, category = 'hot', cursor) => {
  try {
    const res = await fetch(
      `https://api.sidechat.lol/v1/posts?group_id=${groupID}&type=${category}${
        cursor ? '&cursor=' + cursor : ''
      }`,
      {
        method: 'GET',
        headers: {
          ...defaultHeaders,
          Authorization: `Bearer ${token}`,
        },
      },
    );
    const json = await res.json();
    return json;
  } catch (err) {
    console.error(err);
    throw new Error(`Failed to get posts from group.`);
  }
};

/**
 * Upvote or downvote, or unvote a post
 * @param {String} postID - post ID to vote on
 * @param {String} token - user bearer token
 * @param {"upvote"|"downvote"|"none"} action - whether to upvote, downvote, or reset vote
 * @returns
 */
const setVote = async (postID, token, action) => {
  try {
    const res = await fetch(`https://api.sidechat.lol/v1/posts/set_vote`, {
      method: 'POST',
      headers: {
        ...defaultHeaders,
        Authorization: `Bearer ${token}`,
      },
      body: JSON.stringify({
        post_id: postID,
        vote_status: action,
      }),
    });
    const json = await res.json();
    return json;
  } catch (err) {
    console.error(err);
    throw new Error(`Failed to change the vote on post.`);
  }
};

/**
 * Get all the commments on a post
 * @param {*} postID - post ID to get comments for
 * @param {*} token - user bearer token
 * @returns
 */
const getPostComments = async (postID, token) => {
  try {
    const res = await fetch(
      `https://api.sidechat.lol/v1/posts/comments/?post_id=${postID}`,
      {
        method: 'GET',
        headers: {
          ...defaultHeaders,
          Authorization: `Bearer ${token}`,
        },
      },
    );
    const json = await res.json();
    // Function to preprocess the comments and organize them into a nested structure
    function preprocessComments(apiComments) {
      // Map to store comments by their IDs for efficient lookup
      const commentMap = new Map();
      // List to store top-level comments
      const topLevelComments = [];

      // Iterate through the API comments
      apiComments.forEach(comment => {
        // Store the comment in the map with its ID as the key
        commentMap.set(comment.id, comment);
        // Get the parent comment using the reply_post_id
        const parentComment = commentMap.get(comment.reply_post_id);
        // Check if the comment is a top-level comment
        if (
          !parentComment ||
          comment.reply_post_id === comment.parent_post_id
        ) {
          // If it's a top-level comment, push it to the topLevelComments array
          topLevelComments.push(comment);
        } else {
          // If it's a reply, add it to the parent comment's replies array
          if (!parentComment.replies) parentComment.replies = [];
          parentComment.replies.push(comment);
        }
      });

      // Flatten the nested structure and return a single list of comments
      return flattenComments(topLevelComments);
    }

    // Function to flatten nested comments into a single list
    function flattenComments(comments) {
      // Use reduce to flatten the nested comments array into a single list
      return comments.reduce((flatComments, comment) => {
        // Push the current comment to the flatComments array
        flatComments.push(comment);
        // If the current comment has replies, recursively flatten them and push to the flatComments array
        if (comment.replies)
          flatComments.push(...flattenComments(comment.replies));
        // Return the flatComments array
        return flatComments;
      }, []);
    }

    const sortedComments = preprocessComments(json.posts);
    return sortedComments;
  } catch (err) {
    console.error(err);
    throw new Error(`Failed to get comments on post.`);
  }
};

/**
 * Finds out if the user is running the latest version of Offsides
 * @param {String} currentVersion - semver current version
 * @returns {Boolean|String} - if app is up to date, false; if app needs an update, the semver of the latest version
 */
const needsUpdate = async currentVersion => {
  try {
    const res = await fetch(`https://offsides.micahlindley.com/latest.json`);
    if (res.ok) {
      const json = await res.json();
      if (semver.gt(json.latestVersion, currentVersion)) {
        return json.latestVersion;
      } else {
        return false;
      }
    } else {
      return false;
    }
  } catch {
    return false;
  }
};

export {
  loginViaSMS,
  verifySMSCode,
  setAge,
  setDeviceID,
  registerEmail,
  checkEmailVerification,
  getUserAndGroup,
  getGroupPosts,
  setVote,
  getPostComments,
  needsUpdate,
};
